---
description: 
globs: components/**/*.ts,components/**/*.tsx
alwaysApply: false
---
컴포넌트 파일은 다음 규칙을 준수합니다:

  1. 파일 명명 규칙:
    - PascalCase로 작성 (예: Button.tsx, UserProfile.tsx)
    - 인터페이스/타입은 컴포넌트 이름 + Props (예: ButtonProps)
    - 테스트 파일은 컴포넌트 이름 + .test.tsx (예: Button.test.tsx)
    - 스토리북 파일은 컴포넌트 이름 + .stories.tsx (예: Button.stories.tsx)

  2. 디렉토리 구조:
		- common/ : 여러 페이지나 기능에서 공통적으로 재사용되는 독립적인 기본 컴포넌트 모음
    - ui/ : shadcn/ui를 기반으로 한 프로젝트의 기본 디자인 시스템을 구성하는 UI 컴포넌트 집합
    - forms/ : 입력 요소와 폼 관련 로직을 포함하는 모든 종류의 폼 컴포넌트 모음
    - layouts/ : 페이지의 전체적인 구조와 배치를 담당하는 레이아웃 관련 컴포넌트 집합
    - providers/ : 앱 전반에서 사용되는 전역 상태와 설정을 제공하는 컨텍스트 프로바이더 모음
    - features/ : 특정 도메인이나 기능에 특화된 복잡한 컴포넌트들의 논리적 그룹


  3. 컴포넌트 작성 규칙:
    - 단일 책임 원칙을 준수합니다
    - Props 인터페이스는 명시적으로 정의합니다
    - 기본 Props 값은 defaultProps 대신 매개변수 기본값을 사용합니다
    - children prop은 명시적으로 타입을 지정합니다
    - 불필요한 div 중첩을 피하고 Fragment를 활용합니다

  4. shadcn/ui 활용:
    - 기본 UI 컴포넌트는 shadcn/ui를 우선 사용합니다
    - shadcn/ui 컴포넌트 커스터마이징은 variants를 활용합니다
    - 새로운 컴포넌트는 shadcn/ui 스타일 가이드를 따릅니다

  5. 성능 최적화:
    - 무거운 컴포넌트는 React.lazy()로 코드 스플리팅
    - 불필요한 리렌더링 방지를 위해 메모이제이션 활용
    - 큰 리스트는 가상화 적용 (react-virtual 등)
    - 이미지 최적화는 next/image 컴포넌트 사용

  6. 접근성 (A11y):
    - 시맨틱 HTML 요소 사용
    - ARIA 속성 적절히 사용
    - 키보드 네비게이션 지원
    - 충분한 색상 대비 보장

  7. 상태 관리:
    - 로컬 상태는 useState/useReducer 사용
    - 전역 상태는 Zustand 사용
    - 폼 상태는 react-hook-form 사용
    - 서버 상태는 React Query 사용 